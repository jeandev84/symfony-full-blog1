# Install extension in lunix

$ pwd ( Give us current directory )
/var/www/symfony-full-blog1

$ ls ( Give all files in current directory )
install

$ cd Downloads
$ chmod +x name-of-program-you-want-to-install ( ex: bitmap.run )
$ ls
$ ./bitmap.run ( name-of-program-you-want-to-install )

# Download project symfony
$ composer create-project symfony/website-skeleton course

======================================================================
# Require Dump
$ composer require dump

# Require Server
$ composer require server


======================================================================
# Create a Database

$ bin/console doctrine:database:create

======================================================================
Gestion de connection a Mysql en cas d'erreur

https://confluence-atlassan.com/jirab/configuring-database-connection=results-in-error-host-xxxxxxx-is-not-allowed-to-connect-to-this-mysql-server-358908249.html

phpmyadmin
 - information_schema
 - mysql (click here)
    SQL : (paste query here)
      GRANT ALL PRIVILEGES ON *.* TO root@my_ip IDENTIFIED 'root_password' WITH GRANT OPTION;
      GRANT ALL PRIVILEGES ON *.* TO root@127.0.0.1 IDENTIFIED 'my_secret_password(123456)' WITH GRANT OPTION;


=============================================================================

# Make Entity

$ bin/console make:entity

 Class name of the entity to create or update (e.g. VictoriousPizza):
 > Post

 created: src/Entity/Post.php
 created: src/Repository/PostRepository.php

 Entity generated! Now let's add some fields!
 You can always add more fields later manually or by re-running this command.

 New property name (press <return> to stop adding fields):
 > title

 Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 >

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Post.php

 Add another property? Enter the property name (or press <return> to stop adding fields):
 >



  Success!


 Next: When you're ready, create a migration with make:migration

=============================================================
Must to execute this command :
$ bin/console doctrine:schema:update --dump-sql

The following SQL statements will be executed:

     CREATE TABLE post (id INT AUTO_INCREMENT NOT NULL, title VARCHAR(255) NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB;


============================================================
Will be create or update schema of tables
$ bin/console doctrine:schema:update --force

 Updating database schema...

     1 query was executed


 [OK] Database schema updated successfully!

===========================================================

Create a PostController :

$ bin/console make:controller PostController


 created: src/Controller/PostController.php
 created: templates/post/index.html.twig


  Success!


 Next: Open your new controller class and add some pages!

==========================================================

Debug Route :

$ bin/console debug:router

 -------------------------- -------- -------- ------ -----------------------------------
  Name                       Method   Scheme   Host   Path
 -------------------------- -------- -------- ------ -----------------------------------
  _preview_error             ANY      ANY      ANY    /_error/{code}.{_format}
  _wdt                       ANY      ANY      ANY    /_wdt/{token}
  _profiler_home             ANY      ANY      ANY    /_profiler/
  _profiler_search           ANY      ANY      ANY    /_profiler/search
  _profiler_search_bar       ANY      ANY      ANY    /_profiler/search_bar
  _profiler_phpinfo          ANY      ANY      ANY    /_profiler/phpinfo
  _profiler_search_results   ANY      ANY      ANY    /_profiler/{token}/search/results
  _profiler_open_file        ANY      ANY      ANY    /_profiler/open
  _profiler                  ANY      ANY      ANY    /_profiler/{token}
  _profiler_router           ANY      ANY      ANY    /_profiler/{token}/router
  _profiler_exception        ANY      ANY      ANY    /_profiler/{token}/exception
  _profiler_exception_css    ANY      ANY      ANY    /_profiler/{token}/exception.css
  home                       ANY      ANY      ANY    /
  custom                     ANY      ANY      ANY    /custom/{name}
  post.post                  ANY      ANY      ANY    /post/post/create
 -------------------------- -------- -------- ------ -----------------------------------

jeandev@jeandev-Lenovo-G580:/var/www/symfony-full-blog1/course$ bin/console debug:router
 -------------------------- -------- -------- ------ -----------------------------------
  Name                       Method   Scheme   Host   Path
 -------------------------- -------- -------- ------ -----------------------------------
  _preview_error             ANY      ANY      ANY    /_error/{code}.{_format}
  _wdt                       ANY      ANY      ANY    /_wdt/{token}
  _profiler_home             ANY      ANY      ANY    /_profiler/
  _profiler_search           ANY      ANY      ANY    /_profiler/search
  _profiler_search_bar       ANY      ANY      ANY    /_profiler/search_bar
  _profiler_phpinfo          ANY      ANY      ANY    /_profiler/phpinfo
  _profiler_search_results   ANY      ANY      ANY    /_profiler/{token}/search/results
  _profiler_open_file        ANY      ANY      ANY    /_profiler/open
  _profiler                  ANY      ANY      ANY    /_profiler/{token}
  _profiler_router           ANY      ANY      ANY    /_profiler/{token}/router
  _profiler_exception        ANY      ANY      ANY    /_profiler/{token}/exception
  _profiler_exception_css    ANY      ANY      ANY    /_profiler/{token}/exception.css
  home                       ANY      ANY      ANY    /
  custom                     ANY      ANY      ANY    /custom/{name}
  post.index                 ANY      ANY      ANY    /post/
  post.post                  ANY      ANY      ANY    /post/create
 -------------------------- -------- -------- ------ -----------------------------------

===================================================================================
Make Form

$ composer require form validator
$ bin/console make:form


 The name of the form class (e.g. BravePizzaType):
 > PostType

 The name of Entity or fully qualified model class name that the new form will be bound to (empty for none):
 > Post

 created: src/Form/PostType.php


  Success!


 Next: Add fields to your form and start using it.
 Find the documentation at https://symfony.com/doc/current/forms.html

===========================================================================
Require Profiler

$ composer require profiler

===========================================================================

# Make Auth for User Login
$ composer require security
$ bin/console make:auth

===========================================================================

 What style of authentication do you want? [Empty authenticator]:
  [0] Empty authenticator
  [1] Login form authenticator
 > 1

 The class name of the authenticator to create (e.g. AppCustomAuthenticator):
 > CustomAuthenticator

 Choose a name for the controller class (e.g. SecurityController) [SecurityController]:
 >

 Enter the User class that you want to authenticate (e.g. App\Entity\User) []:
 > ^C (Ctrl + C)

===============================================================================
1. Make Auth

$ bin/console make:auth

What style of authentication do you want? [Empty authenticator]:
  [0] Empty authenticator
  [1] Login form authenticator
 > 1

 The class name of the authenticator to create (e.g. AppCustomAuthenticator):
 > CustomAuthenticator

 Choose a name for the controller class (e.g. SecurityController) [SecurityController]:
 >

 Enter the User class that you want to authenticate (e.g. App\Entity\User) []:
 > ^C


2 . Make User

$ bin/console make:user

The name of the security user class (e.g. User) [User]:
 >

 Do you want to store user data in the database (via Doctrine)? (yes/no) [yes]:
 >

 Enter a property name that will be the unique "display" name for the user (e.g. email, username, uuid) [email]:
 > username

 Will this app need to hash/check user passwords? Choose No if passwords are not needed or will be checked/hashed by some other system (e.g. a single sign-on server).

 Does this app need to hash/check user passwords? (yes/no) [yes]:
 >

 created: src/Entity/User.php
 created: src/Repository/UserRepository.php
 updated: src/Entity/User.php
 updated: config/packages/security.yaml


  Success!


 Next Steps:
   - Review your new App\Entity\User class.
   - Use make:entity to add more fields to your User entity and then run make:migration.
   - Create a way to authenticate! See https://symfony.com/doc/current/security.html

==================================================================
Make Form

$ bin/console make:auth

 What style of authentication do you want? [Empty authenticator]:
  [0] Empty authenticator
  [1] Login form authenticator
 > 1

 The class name of the authenticator to create (e.g. AppCustomAuthenticator):
 > CustomAuthenticator

 Choose a name for the controller class (e.g. SecurityController) [SecurityController]:
 >

 Do you want to generate a '/logout' URL? (yes/no) [yes]:
 >

 created: src/Security/CustomAuthenticator.php
 updated: config/packages/security.yaml
 created: src/Controller/SecurityController.php
 created: templates/security/login.html.twig


  Success!


 Next:
 - Customize your new authenticator.
 - Finish the redirect "TODO" in the App\Security\CustomAuthenticator::onAuthenticationSuccess() method.
 - Review & adapt the login template: templates/security/login.html.twig.

================================================================================
Debug Router

$ bin/console debug:router
 -------------------------- -------- -------- ------ -----------------------------------
  Name                       Method   Scheme   Host   Path
 -------------------------- -------- -------- ------ -----------------------------------
  _preview_error             ANY      ANY      ANY    /_error/{code}.{_format}
  _wdt                       ANY      ANY      ANY    /_wdt/{token}
  _profiler_home             ANY      ANY      ANY    /_profiler/
  _profiler_search           ANY      ANY      ANY    /_profiler/search
  _profiler_search_bar       ANY      ANY      ANY    /_profiler/search_bar
  _profiler_phpinfo          ANY      ANY      ANY    /_profiler/phpinfo
  _profiler_search_results   ANY      ANY      ANY    /_profiler/{token}/search/results
  _profiler_open_file        ANY      ANY      ANY    /_profiler/open
  _profiler                  ANY      ANY      ANY    /_profiler/{token}
  _profiler_router           ANY      ANY      ANY    /_profiler/{token}/router
  _profiler_exception        ANY      ANY      ANY    /_profiler/{token}/exception
  _profiler_exception_css    ANY      ANY      ANY    /_profiler/{token}/exception.css
  home                       ANY      ANY      ANY    /
  custom                     ANY      ANY      ANY    /custom/{name}
  post.index                 ANY      ANY      ANY    /post/
  post.create                ANY      ANY      ANY    /post/create
  post.show                  ANY      ANY      ANY    /post/show/{id}
  post.delete                ANY      ANY      ANY    /post/delete/{id}
  app_login                  ANY      ANY      ANY    /login
  app_logout                 ANY      ANY      ANY    /logout
 -------------------------- -------- -------- ------ -----------------------------------

=============================================================================
Generate Schema ( bin/console doctrine:schema:update --dump-sql + bin/console doctrine:schema:update --force)

$ bin/console doctrine:schema:update --dump-sql

The following SQL statements will be executed:

     CREATE TABLE user (id INT AUTO_INCREMENT NOT NULL, username VARCHAR(180) NOT NULL, roles LONGTEXT NOT NULL COMMENT '(DC2Type:json)', password VARCHAR(255) NOT NULL, UNIQUE INDEX UNIQ_8D93D649F85E0677 (username), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB;


2. $ bin/console doctrine:schema:update --force
 Updating database schema...

     1 query was executed


 [OK] Database schema updated successfully!

=================================================================================

$ bin/console make:controller RegisterController


 created: src/Controller/RegisterController.php
 created: templates/register/index.html.twig


  Success!


 Next: Open your new controller class and add some pages!

===========================================================================

Generate Entity if already exist

$ bin/console make:entity --regenerate



===========================================================================

Migrate:

$ bin/console doctrine:schema:update --force

===========================================================================
Create Entity Category

$ bin/console make:entity Category


 created: src/Entity/Category.php
 created: src/Repository/CategoryRepository.php

 Entity generated! Now let's add some fields!
 You can always add more fields later manually or by re-running this command.

 New property name (press <return> to stop adding fields):
 > name

 Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 >

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Category.php

 Add another property? Enter the property name (or press <return> to stop adding fields):
 >



  Success!


 Next: When you're ready, create a migration with make:migration

====================================================================================

Make Entity Regenerate

$ bin/console make:entity --regenerate

 This command will generate any missing methods (e.g. getters & setters) for a class or all classes in a namespace.

 To overwrite any existing methods, re-run this command with the --overwrite flag

 Enter a class or namespace to regenerate [App\Entity]:
 >

 updated: src/Entity/Post.php
 updated: src/Entity/Category.php
 no change: src/Entity/User.php


  Success!

=================================================================
Migrate

$ bin/console doctrine:schema:update --force

=================================================================

SERVICES :

$ bin/console debug:container

=================================================================

Debug Service FileUploader :

$ bin/console  debug:container fileUpl

Information for Service "App\Services\FileUploader"
===================================================

 Class FileUploader

 ---------------- ---------------------------
  Option           Value
 ---------------- ---------------------------
  Service ID       App\Services\FileUploader
  Class            App\Services\FileUploader
  Tags             -
  Public           no
  Synthetic        no
  Lazy             no
  Shared           yes
  Abstract         no
  Autowired        yes
  Autoconfigured   yes
 ---------------- ---------------------------


 ! [NOTE] The "App\Services\FileUploader" service or alias has been removed or inlined when the container was compiled.

============================================================================
Debug Our Service 'custom_file_uploader'

$ bin/console debug:container custom_file_uploader